"""init

Revision ID: 28efff72fbe6
Revises: 
Create Date: 2021-04-04 02:54:52.720913

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '28efff72fbe6'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('contests',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('published', sa.Boolean(), server_default='False', nullable=False),
    sa.Column('penalty', sa.Interval(), server_default='300', nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('environments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('active', sa.Boolean(), server_default='True', nullable=True),
    sa.Column('published', sa.Boolean(), server_default='False', nullable=True),
    sa.Column('compile_image_name', sa.String(), nullable=True),
    sa.Column('test_image_name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('login_id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('salt', sa.LargeBinary(length=32), nullable=False),
    sa.Column('password', sa.LargeBinary(length=32), nullable=False),
    sa.Column('admin', sa.Boolean(), server_default='False', nullable=True),
    sa.Column('created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('login_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('workers',
    sa.Column('hostname', sa.String(), nullable=False),
    sa.Column('pid', sa.Integer(), nullable=False),
    sa.Column('max_processes', sa.Integer(), nullable=False),
    sa.Column('startup_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('last_contact', sa.DateTime(timezone=True), nullable=False),
    sa.Column('processed', sa.Integer(), nullable=False),
    sa.Column('errors', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('hostname', 'pid')
    )
    op.create_table('problems',
    sa.Column('contest_id', sa.String(), nullable=False),
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('time_limit', sa.Integer(), nullable=False),
    sa.Column('memory_limit', sa.Integer(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('score', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['contest_id'], ['contests.id'], ),
    sa.PrimaryKeyConstraint('contest_id', 'id')
    )
    op.create_table('tokens',
    sa.Column('token', sa.LargeBinary(length=32), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('expires', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('token')
    )
    op.create_table('submissions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('contest_id', sa.String(), nullable=False),
    sa.Column('problem_id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('code', sa.LargeBinary(), nullable=False),
    sa.Column('code_bytes', sa.Integer(), nullable=False),
    sa.Column('environment_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('Waiting', 'Running', 'Accepted', 'CompilationError', 'RuntimeError', 'WrongAnswer', 'MemoryLimitExceeded', 'TimeLimitExceeded', 'OutputLimitExceeded', 'InternalError', name='judgestatus'), server_default='Waiting', nullable=False),
    sa.Column('compile_time', sa.Interval(), nullable=True),
    sa.Column('max_time', sa.Interval(), nullable=True),
    sa.Column('max_memory', sa.Integer(), nullable=True),
    sa.Column('created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['contest_id', 'problem_id'], ['problems.contest_id', 'problems.id'], ),
    sa.ForeignKeyConstraint(['environment_id'], ['environments.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('submissions_contest_problem_idx', 'submissions', ['contest_id', 'problem_id'], unique=False)
    op.create_table('tests',
    sa.Column('contest_id', sa.String(), nullable=False),
    sa.Column('problem_id', sa.String(), nullable=False),
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('input', sa.LargeBinary(), nullable=False),
    sa.Column('output', sa.LargeBinary(), nullable=False),
    sa.ForeignKeyConstraint(['contest_id', 'problem_id'], ['problems.contest_id', 'problems.id'], ),
    sa.PrimaryKeyConstraint('contest_id', 'problem_id', 'id')
    )
    op.create_table('judge_results',
    sa.Column('contest_id', sa.String(), nullable=False),
    sa.Column('problem_id', sa.String(), nullable=False),
    sa.Column('submission_id', sa.Integer(), nullable=False),
    sa.Column('test_id', sa.String(), nullable=False),
    sa.Column('status', sa.Enum('Waiting', 'Running', 'Accepted', 'CompilationError', 'RuntimeError', 'WrongAnswer', 'MemoryLimitExceeded', 'TimeLimitExceeded', 'OutputLimitExceeded', 'InternalError', name='judgestatus'), server_default='Waiting', nullable=False),
    sa.Column('time', sa.Interval(), nullable=True),
    sa.Column('memory', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['contest_id', 'problem_id', 'test_id'], ['tests.contest_id', 'tests.problem_id', 'tests.id'], ),
    sa.ForeignKeyConstraint(['submission_id'], ['submissions.id'], ),
    sa.PrimaryKeyConstraint('contest_id', 'problem_id', 'submission_id', 'test_id')
    )

    from secrets import token_bytes
    from penguin_judge import models as m
    from penguin_judge.api.auth import _kdf
    salt = token_bytes()
    op.execute(sa.insert(m.User).values(
        login_id='admin', name='Administrator', salt=salt, admin=True,
        password=_kdf('penguinpenguin', salt)))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('judge_results')
    op.drop_table('tests')
    op.drop_index('submissions_contest_problem_idx', table_name='submissions')
    op.drop_table('submissions')
    op.drop_table('tokens')
    op.drop_table('problems')
    op.drop_table('workers')
    op.drop_table('users')
    op.drop_table('environments')
    op.drop_table('contests')
    # ### end Alembic commands ###
