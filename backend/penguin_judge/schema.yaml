openapi: "3.0.0"
info:
  title: PenguinJudge API Specification
  version: "0.0.1"
security:
  - {}
  - BearerAuth: []
  - ApiToken: []
  - CookieToken: []
paths:
  /auth:
    post:
      operationId: authenticate
      security: []
      summary: Authenticate user with id/password to get token.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        '200':
          description: Responses token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
  /user:
    get:
      operationId: getCurrentUser
      security:
        - BearerAuth: []
        - ApiToken: []
        - CookieToken: []
      summary: Gets currently authenticated user info
      responses:
        '200':
          description: Responses authenticated user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users:
    post:
      operationId: registerUser
      security:
        - BearerAuth: []
        - ApiToken: []
        - CookieToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
      responses:
        '201':
          description: user registration successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/{user_id}:
    get:
      operationId: getUser
      parameters:
        - $ref: "#/components/parameters/UserID"
      responses:
        '200':
          description: Responses user list 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /environments:
    get:
      operationId: listEnvironments
      summary: List code compile/execute environments
      responses:
        '200':
          description: Responses environment list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environments"
  /contests:
    get:
      operationId: listContests
      responses:
        '200':
          description: Responses contest list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contests"
    post:
      operationId: createContest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContestCreation"
      responses:
        '201':
          description: 作成したコンテスト情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contest"
  /contests/{contest_id}:
    get:
      operationId: getContest
      parameters:
        - $ref: "#/components/parameters/ContestID"
      responses:
        '200':
          description: Responses specific contest
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contest"
    patch:
      operationId: updateContest
      parameters:
        - $ref: "#/components/parameters/ContestID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contest"
      responses:
        '201':
          description: 作成したコンテスト情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contest"
  /contests/{contest_id}/submissions:
    get:
      operationId: listSubmissions
      parameters:
        - $ref: "#/components/parameters/ContestID"
      responses:
        '200':
          description: Responses submissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Submissions"
    post:
      operationId: postSubmission
      description: "解答を投稿する"
      parameters:
        - $ref: "#/components/parameters/ContestID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Submission"
      responses:
        '201':
          description: Responses submission info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmissionSummary"
  /contests/{contest_id}/submissions/{submission_id}:
    get:
      operationId: getSubmission
      parameters:
        - $ref: "#/components/parameters/ContestID"
        - $ref: "#/components/parameters/SubmissionID"
      responses:
        '200':
          description: Responses submission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Submission"
  /contests/{contest_id}/problems:
    get:
      operationId: listProblems
      description: コンテストの問題一覧を取得
      parameters:
        - $ref: "#/components/parameters/ContestID"
      responses:
        '200':
          description: 問題一覧
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problems"
    post:
      operationId: createProblem
      description: コンテストの問題を作成する
      parameters:
        - $ref: "#/components/parameters/ContestID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProblemCreation"
      responses:
        '201':
          description: 問題詳細
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /contests/{contest_id}/problems/{problem_id}:
    get:
      operationId: getProblem
      description: コンテストの問題の詳細情報を取得
      parameters:
        - $ref: "#/components/parameters/ContestID"
        - $ref: "#/components/parameters/ProblemID"
      responses:
        '200':
          description: 問題の詳細情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    patch:
      operationId: updateProblem
      description: コンテストの問題を修正する
      parameters:
        - $ref: "#/components/parameters/ContestID"
        - $ref: "#/components/parameters/ProblemID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Problem"
      responses:
        '200':
          description: 修正後の問題情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      operationId: deleteProblem
      description: コンテストの問題を削除する
      parameters:
        - $ref: "#/components/parameters/ContestID"
        - $ref: "#/components/parameters/ProblemID"
      responses:
        '204':
          description: 削除成功
components:
  schemas:
    Token:
      type: object
      properties:
        token:
          type: string
        expires_in:
          type: integer
    UserID:
      type: string
      pattern: '\w{3,15}'
    Login:
      type: object
      required:
        - id
        - password
      properties:
        id:
          $ref: "#/components/schemas/UserID"
        password:
          type: string
          pattern: "\\S{8,}"
    User:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserID"
        name:
          type: string
          minLength: 1
        created:
          type: string
          format: date-time
        admin:
          type: boolean
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    UserRegistration:
      allOf:
        - $ref: "#/components/schemas/User"
        - $ref: "#/components/schemas/Login"
        - required:
          - name
    Environment:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    Environments:
      type: array
      items:
        $ref: "#/components/schemas/Environment"
    ContestSummary:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
    Contests:
      type: array
      items:
        $ref: "#/components/schemas/ContestSummary"
    Contest:
      allOf:
        - $ref: "#/components/schemas/ContestSummary"
        - properties:
            description:
              type: string
            problems:
              $ref: "#/components/schemas/Problems"
    ContestCreation:
      allOf:
        - $ref: "#/components/schemas/Contest"
        - required:
          - id
          - title
          - start_time
          - end_time
          - description
    Problem:
      type: object
      properties:
        id:
          type: string
        contest_id:
          type: string
        title:
          type: string
        time_limit:
          description: "[sec]"
          type: integer
        memory_limit:
          description: "[MiB]"
          type: integer
        description:
          type: string
        score:
          type: integer
    ProblemCreation:
      allOf:
        - $ref: "#/components/schemas/Problem"
        - required:
          - id
          - title
          - time_limit
          - description
          - score
    Problems:
      type: array
      items:
        $ref: "#/components/schemas/Problem"
    SubmissionSummary:
      type: object
      properties:
        contest_id:
          type: string
        problem_id:
          type: string
        id:
          type: integer
        user_id:
          type: string
        environment_id:
          type: integer
        status:
          type: string
        created:
          type: string
          format: date-time
    Submissions:
      type: array
      items:
        $ref: "#/components/schemas/SubmissionSummary"
    Submission:
      allOf:
        - $ref: "#/components/schemas/SubmissionSummary"
        - properties:
            code:
              type: string
          required:
            - problem_id
            - environment_id
            - code
  parameters:
    UserID:
      name: user_id
      in: path
      required: true
      schema:
        type: string
    ContestID:
      name: contest_id
      in: path
      required: true
      schema:
        type: string
    ProblemID:
      name: problem_id
      in: path
      required: true
      schema:
        type: string
    SubmissionID:
      name: submission_id
      in: path
      required: true
      schema:
        type: integer
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    ApiToken:
      type: apiKey
      in: header
      name: X-Auth-Token
    CookieToken:
      type: apiKey
      in: cookie
      name: AuthToken
