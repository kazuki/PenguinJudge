openapi: "3.0.0"
info:
  title: PenguinJudge API Specification
  version: "0.0.1"
security:
  - {}
  - BearerAuth: []
  - ApiToken: []
  - CookieToken: []
paths:
  /auth:
    post:
      operationId: authenticate
      security: []
      summary: Authenticate user with id/password to get token.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        '200':
          description: Responses token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
  /user:
    get:
      operationId: getCurrentUser
      security:
        - BearerAuth: []
        - ApiToken: []
        - CookieToken: []
      summary: Gets currently authenticated user info
      responses:
        '200':
          description: Responses authenticated user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users:
    post:
      operationId: registerUser
      security:
        - BearerAuth: []
        - ApiToken: []
        - CookieToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
      responses:
        '201':
          description: user registration successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/{user_id}:
    get:
      operationId: getUser
      parameters:
        - $ref: "#/components/parameters/UserID"
      responses:
        '200':
          description: Responses user list 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '404':
          description: not found
  /environments:
    get:
      operationId: listEnvironments
      summary: List code compile/execute environments
      responses:
        '200':
          description: Responses environment list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environments"
    post:
      operationId: registerEnvironment
      security:
        - BearerAuth: []
        - ApiToken: []
        - CookieToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnvironmentCreation"
      responses:
        '201':
          description: registered environment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environment"
  /environments/{environment_id}:
    patch:
      operationId: updateEnvironment
      security:
        - BearerAuth: []
        - ApiToken: []
        - CookieToken: []
      parameters:
        - $ref: "#/components/parameters/EnvironmentID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Environment"
      responses:
        '200':
          description: updated environment info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environment"
        '404':
          description: not found
    delete:
      operationId: deleteEnvironment
      security:
        - BearerAuth: []
        - ApiToken: []
        - CookieToken: []
      parameters:
        - $ref: "#/components/parameters/EnvironmentID"
      responses:
        '204':
          description: deleted
        '404':
          description: not found
  /contests:
    get:
      operationId: listContests
      parameters:
        - $ref: "#/components/parameters/PageParams"
        - $ref: "#/components/parameters/PerPageParams"
        - $ref: "#/components/parameters/ContestStatusFilter"
      responses:
        '200':
          description: Responses contest list
          headers:
            X-Total:
              $ref: "#/components/headers/TotalItemsHeader"
            X-Total-Pages:
              $ref: "#/components/headers/TotalPagesHeader"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contests"
    post:
      operationId: createContest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContestCreation"
      responses:
        '201':
          description: 作成したコンテスト情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contest"
  /contests/{contest_id}:
    get:
      operationId: getContest
      parameters:
        - $ref: "#/components/parameters/ContestID"
      responses:
        '200':
          description: Responses specific contest
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contest"
        '404':
          description: not found
    patch:
      operationId: updateContest
      parameters:
        - $ref: "#/components/parameters/ContestID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contest"
      responses:
        '201':
          description: 作成したコンテスト情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contest"
        '404':
          description: not found
  /contests/{contest_id}/submissions:
    get:
      operationId: listSubmissions
      parameters:
        - $ref: "#/components/parameters/ContestID"
        - $ref: "#/components/parameters/PageParams"
        - $ref: "#/components/parameters/PerPageParams"
        - $ref: "#/components/parameters/ProblemFilter"
        - $ref: "#/components/parameters/EnvironmentFilter"
        - $ref: "#/components/parameters/JudgeStatusFilter"
        - $ref: "#/components/parameters/UserIDFilter"
        - $ref: "#/components/parameters/SubmissionSortKey"
      responses:
        '200':
          description: Responses submissions
          headers:
            X-Total:
              $ref: "#/components/headers/TotalItemsHeader"
            X-Total-Pages:
              $ref: "#/components/headers/TotalPagesHeader"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Submissions"
        '404':
          description: not found
    post:
      operationId: postSubmission
      description: "解答を投稿する"
      parameters:
        - $ref: "#/components/parameters/ContestID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Submission"
      responses:
        '201':
          description: Responses submission info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmissionSummary"
        '403':
          description: 開催中はログインが必要
        '404':
          description: not found contest_id or problem_id
  /contests/{contest_id}/submissions/{submission_id}:
    get:
      operationId: getSubmission
      parameters:
        - $ref: "#/components/parameters/ContestID"
        - $ref: "#/components/parameters/SubmissionID"
      responses:
        '200':
          description: Responses submission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Submission"
        '404':
          description: not found content_id or problem_id. またはコンテスト開始前
  /contests/{contest_id}/problems:
    get:
      operationId: listProblems
      description: コンテストの問題一覧を取得
      parameters:
        - $ref: "#/components/parameters/ContestID"
      responses:
        '200':
          description: 問題一覧
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problems"
        '403':
          description: コンテスト開始前
        '404':
          description: not found
    post:
      operationId: createProblem
      description: コンテストの問題を作成する
      security:
        - BearerAuth: []
        - ApiToken: []
        - CookieToken: []
      parameters:
        - $ref: "#/components/parameters/ContestID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProblemCreation"
      responses:
        '201':
          description: 問題詳細
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /contests/{contest_id}/problems/{problem_id}:
    get:
      operationId: getProblem
      description: コンテストの問題の詳細情報を取得
      parameters:
        - $ref: "#/components/parameters/ContestID"
        - $ref: "#/components/parameters/ProblemID"
      responses:
        '200':
          description: 問題の詳細情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '404':
          description: not found. またはコンテスト開始前
    patch:
      operationId: updateProblem
      description: コンテストの問題を修正する
      security:
        - BearerAuth: []
        - ApiToken: []
        - CookieToken: []
      parameters:
        - $ref: "#/components/parameters/ContestID"
        - $ref: "#/components/parameters/ProblemID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Problem"
      responses:
        '200':
          description: 修正後の問題情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '404':
          description: not found
    delete:
      operationId: deleteProblem
      description: コンテストの問題を削除する
      security:
        - BearerAuth: []
        - ApiToken: []
        - CookieToken: []
      parameters:
        - $ref: "#/components/parameters/ContestID"
        - $ref: "#/components/parameters/ProblemID"
      responses:
        '204':
          description: 削除成功
  /contests/{contest_id}/problems/{problem_id}/tests:
    get:
      operationId: listTests
      description: 問題のテスト用入出力データセットの一覧を返却します
      security:
        - BearerAuth: []
        - ApiToken: []
        - CookieToken: []
      parameters:
        - $ref: "#/components/parameters/ContestID"
        - $ref: "#/components/parameters/ProblemID"
      responses:
        '200':
          description: 一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
    put:
      operationId: replaceTestDataset
      description: 問題のテスト用入出力データセットを置き換えます。zipで圧縮し、ファイル名はテスト名、拡張子.inが入力、.outが出力のデータとなるようにします
      security:
        - BearerAuth: []
        - ApiToken: []
        - CookieToken: []
      parameters:
        - $ref: "#/components/parameters/ContestID"
        - $ref: "#/components/parameters/ProblemID"
      responses:
        '200':
          description: 一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /contests/{contest_id}/problems/{problem_id}/tests/{test_id}/in:
    get:
      operationId: getTestData
      description: 問題のテスト用入力データを返却します
      security:
        - BearerAuth: []
        - ApiToken: []
        - CookieToken: []
      parameters:
        - $ref: "#/components/parameters/ContestID"
        - $ref: "#/components/parameters/ProblemID"
        - $ref: "#/components/parameters/TestID"
      responses:
        '200':
          description: データ
          content:
            '*/*': {}
  /contests/{contest_id}/problems/{problem_id}/tests/{test_id}/out:
    get:
      operationId: getTestData
      description: 問題のテスト用出力データを返却します
      security:
        - BearerAuth: []
        - ApiToken: []
        - CookieToken: []
      parameters:
        - $ref: "#/components/parameters/ContestID"
        - $ref: "#/components/parameters/ProblemID"
        - $ref: "#/components/parameters/TestID"
      responses:
        '200':
          description: データ
          content:
            '*/*': {}
  /contests/{contest_id}/rankings:
    get:
      operationId: listRankings
      description: コンテストの順位表を取得する
      parameters:
        - $ref: "#/components/parameters/ContestID"
      responses:
        '200':
          description: 順位表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rankings"
        '403':
          description: コンテスト開催前です
        '404':
          description: not found
components:
  schemas:
    Token:
      type: object
      properties:
        token:
          type: string
        expires_in:
          type: integer
    UserID:
      type: string
      pattern: '\w{3,15}'
    Login:
      type: object
      required:
        - id
        - password
      properties:
        id:
          $ref: "#/components/schemas/UserID"
        password:
          type: string
          pattern: "\\S{8,}"
    User:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserID"
        name:
          type: string
          minLength: 1
        created:
          type: string
          format: date-time
        admin:
          type: boolean
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    UserRegistration:
      allOf:
        - $ref: "#/components/schemas/User"
        - $ref: "#/components/schemas/Login"
        - required:
          - name
    Environment:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        active:
          type: boolean
          description: 新規に投稿可能な言語かどうか
        published:
          type: boolean
          description: 管理者のみ参照可能
        compile_image_name:
          type: string
          description: 管理者のみ参照可能
        test_image_name:
          type: string
          description: 管理者のみ参照可能
    EnvironmentCreation:
      allOf:
        - $ref: "#/components/schemas/Environment"
        - required:
            - name
            - test_image_name
    Environments:
      type: array
      items:
        $ref: "#/components/schemas/Environment"
    ContestProblemID:
      type: string
      pattern: '[^\~]\w*'
    ContestSummary:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ContestProblemID"
        title:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        published:
          type: boolean
    Contests:
      type: array
      items:
        $ref: "#/components/schemas/ContestSummary"
    Contest:
      allOf:
        - $ref: "#/components/schemas/ContestSummary"
        - properties:
            description:
              type: string
            problems:
              $ref: "#/components/schemas/Problems"
    ContestCreation:
      allOf:
        - $ref: "#/components/schemas/Contest"
        - required:
          - id
          - title
          - start_time
          - end_time
          - description
    Problem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ContestProblemID"
        contest_id:
          $ref: "#/components/schemas/ContestProblemID"
        title:
          type: string
        time_limit:
          description: "[sec]"
          type: integer
        memory_limit:
          description: "[MiB]"
          type: integer
        description:
          type: string
        score:
          type: integer
    ProblemCreation:
      allOf:
        - $ref: "#/components/schemas/Problem"
        - required:
          - id
          - title
          - time_limit
          - description
          - score
    Problems:
      type: array
      items:
        $ref: "#/components/schemas/Problem"
    SubmissionSummary:
      type: object
      properties:
        contest_id:
          type: string
        problem_id:
          type: string
        id:
          type: integer
        user_id:
          type: string
        environment_id:
          type: integer
        status:
          $ref: "#/components/schemas/JudgeStatus"
        code_bytes:
          type: integer
          nullable: true
        max_time:
          type: number
          nullable: true
        max_memory:
          type: integer
          nullable: true
        created:
          type: string
          format: date-time
    Submissions:
      type: array
      items:
        $ref: "#/components/schemas/SubmissionSummary"
    Submission:
      allOf:
        - $ref: "#/components/schemas/SubmissionSummary"
        - properties:
            code:
              type: string
            tests:
              $ref: "#/components/schemas/TestResults"
          required:
            - problem_id
            - environment_id
            - code
    Ranking:
      type: object
      properties:
        ranking:
          type: integer
        user_id:
          type: string
        user_name:
          type: string
        score:
          type: integer
        time:
          type: number
          format: double
        penalties:
          type: integer
        adjusted_time:
          description: ペナルティを加算後の所要時間
          type: number
          format: double
        problems:
          type: object
          description: keyは問題ID
          additionalProperties:
            type: object
            properties:
              score:
                type: integer
              time:
                type: number
                format: double
              penalties:
                type: integer
    Rankings:
      type: array
      items:
        $ref: "#/components/schemas/Ranking"
    JudgeStatus:
      type: string
      enum:
        - Waiting
        - Running
        - Accepted
        - CompilationError
        - RuntimeError
        - WrongAnswer
        - MemoryLimitExceeded
        - TimeLimitExceeded
        - OutputLimitExceeded
        - InternalError
    TestResult:
      type: object
      properties:
        id:
          type: string
        status:
          $ref: "#/components/schemas/JudgeStatus"
        time:
          type: number
          format: double
          description: コンテスト後にのみ得られます
        memory:
          type: number
          description: コンテスト後にのみ得られます
    TestResults:
      type: array
      items:
        $ref: "#/components/schemas/TestResult"
  parameters:
    UserID:
      name: user_id
      in: path
      required: true
      schema:
        type: string
    ContestID:
      name: contest_id
      in: path
      required: true
      schema:
        type: string
    ProblemID:
      name: problem_id
      in: path
      required: true
      schema:
        type: string
    SubmissionID:
      name: submission_id
      in: path
      required: true
      schema:
        type: integer
    TestID:
      name: test_id
      in: path
      required: true
      schema:
        type: string
    EnvironmentID:
      name: environment_id
      in: path
      required: true
      schema:
        type: integer
    PageParams:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
    PerPageParams:
      name: per_page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 20
        maximum: 100
    ContestStatusFilter:
      name: status
      in: query
      schema:
        type: string
        enum:
          - scheduled
          - running
          - finished
    ProblemFilter:
      name: problem_id
      in: query
      schema:
        type: string
    EnvironmentFilter:
      name: environment_id
      in: query
      schema:
        type: integer
    JudgeStatusFilter:
      name: status
      in: query
      schema:
        $ref: "#/components/schemas/JudgeStatus"
    UserIDFilter:
      name: user_id
      in: query
      schema:
        type: string
    SubmissionSortKey:
      name: sort
      in: query
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - created
            - -created
            - code_bytes
            - -code_bytes
            - max_time
            - -max_time
            - max_memory
            - -max_memory
  headers:
    TotalItemsHeader:
      schema:
        type: integer
    TotalPagesHeader:
      schema:
        type: integer
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    ApiToken:
      type: apiKey
      in: header
      name: X-Auth-Token
    CookieToken:
      type: apiKey
      in: cookie
      name: AuthToken
